page.title=Storage
page.customHeadTag=<link rel="stylesheet" type="text/css" href="doxygen-dac.css">
@jd:body
<!-- Generated by Doxygen 1.8.6 -->
</div><!-- top -->
<div class="header">
  <div class="summary">
<a href="#files">Files</a> &#124;
<a href="#typedef-members">Typedefs</a> &#124;
<a href="#enum-members">Enumerations</a> &#124;
<a href="#func-members">Functions</a>  </div>
  <div class="headertitle">
<div class="title">Storage</div>  </div>
</div><!--header-->
<div class="contents">
<table class="memberdecls">
<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="files"></a>
Files</h2></td></tr>
<tr class="memitem:obb_8h"><td class="memItemLeft" align="right" valign="top">file &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="obb_8h.html">obb.h</a></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:storage__manager_8h"><td class="memItemLeft" align="right" valign="top">file &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="storage__manager_8h.html">storage_manager.h</a></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
</table><table class="memberdecls">
<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="typedef-members"></a>
Typedefs</h2></td></tr>
<tr class="memitem:gaa5037fe4c0d785a50fc62ac2de9844c3"><td class="memItemLeft" align="right" valign="top">typedef struct <a class="el" href="group___storage.html#gaa5037fe4c0d785a50fc62ac2de9844c3">AObbInfo</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group___storage.html#gaa5037fe4c0d785a50fc62ac2de9844c3">AObbInfo</a></td></tr>
<tr class="separator:gaa5037fe4c0d785a50fc62ac2de9844c3"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga419f40803228bca62e32beb911ab28e2"><td class="memItemLeft" align="right" valign="top">typedef struct <a class="el" href="group___storage.html#ga419f40803228bca62e32beb911ab28e2">AStorageManager</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group___storage.html#ga419f40803228bca62e32beb911ab28e2">AStorageManager</a></td></tr>
<tr class="separator:ga419f40803228bca62e32beb911ab28e2"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:gaf077d06586fa4c0212baa2fe458b9617"><td class="memItemLeft" align="right" valign="top">typedef void(*&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group___storage.html#gaf077d06586fa4c0212baa2fe458b9617">AStorageManager_obbCallbackFunc</a> )(const char *filename, const int32_t state, void *data)</td></tr>
<tr class="separator:gaf077d06586fa4c0212baa2fe458b9617"><td class="memSeparator" colspan="2">&#160;</td></tr>
</table><table class="memberdecls">
<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="enum-members"></a>
Enumerations</h2></td></tr>
<tr class="memitem:gae4d5251432e1a9e6803c0240cc492e18"><td class="memItemLeft" align="right" valign="top">enum &#160;</td><td class="memItemRight" valign="bottom">{ <a class="el" href="group___storage.html#ggae4d5251432e1a9e6803c0240cc492e18a33e2ae83b4c25d33a4335dccf1de1c3a">AOBBINFO_OVERLAY</a> = 0x0001
 }</td></tr>
<tr class="separator:gae4d5251432e1a9e6803c0240cc492e18"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:gae8a3b6a5d0d3244ed73924ab2421a0d0"><td class="memItemLeft" align="right" valign="top">enum &#160;</td><td class="memItemRight" valign="bottom">{ <br/>
&#160;&#160;<a class="el" href="group___storage.html#ggae8a3b6a5d0d3244ed73924ab2421a0d0a2a9c420e6008c108a7198fd861c042d5">AOBB_STATE_MOUNTED</a> = 1, 
<a class="el" href="group___storage.html#ggae8a3b6a5d0d3244ed73924ab2421a0d0a6710bb5b68cfc115eedcde2aafd8a667">AOBB_STATE_UNMOUNTED</a> = 2, 
<a class="el" href="group___storage.html#ggae8a3b6a5d0d3244ed73924ab2421a0d0a50642881107d6673aace1494a5d6fce2">AOBB_STATE_ERROR_INTERNAL</a> = 20, 
<a class="el" href="group___storage.html#ggae8a3b6a5d0d3244ed73924ab2421a0d0a324da2b8fea5875339d442d1f2d0b45b">AOBB_STATE_ERROR_COULD_NOT_MOUNT</a> = 21, 
<br/>
&#160;&#160;<a class="el" href="group___storage.html#ggae8a3b6a5d0d3244ed73924ab2421a0d0a1f2b51b53fc57b57a9967f6ce0c88dbe">AOBB_STATE_ERROR_COULD_NOT_UNMOUNT</a> = 22, 
<a class="el" href="group___storage.html#ggae8a3b6a5d0d3244ed73924ab2421a0d0a3ce8539aa8b531c9de1d16041322d7a8">AOBB_STATE_ERROR_NOT_MOUNTED</a> = 23, 
<a class="el" href="group___storage.html#ggae8a3b6a5d0d3244ed73924ab2421a0d0a8b074af151167a965a550b9829fafb37">AOBB_STATE_ERROR_ALREADY_MOUNTED</a> = 24, 
<a class="el" href="group___storage.html#ggae8a3b6a5d0d3244ed73924ab2421a0d0a2467a4b6a634680e12c288a7790ff66c">AOBB_STATE_ERROR_PERMISSION_DENIED</a> = 25
<br/>
 }</td></tr>
<tr class="separator:gae8a3b6a5d0d3244ed73924ab2421a0d0"><td class="memSeparator" colspan="2">&#160;</td></tr>
</table><table class="memberdecls">
<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="func-members"></a>
Functions</h2></td></tr>
<tr class="memitem:ga7beb4f82e3bf9a4b8197917f92ac4d5e"><td class="memItemLeft" align="right" valign="top"><a class="el" href="group___storage.html#gaa5037fe4c0d785a50fc62ac2de9844c3">AObbInfo</a> *&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group___storage.html#ga7beb4f82e3bf9a4b8197917f92ac4d5e">AObbScanner_getObbInfo</a> (const char *filename)</td></tr>
<tr class="separator:ga7beb4f82e3bf9a4b8197917f92ac4d5e"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:gaec5a4428008f545e829486099298031a"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group___storage.html#gaec5a4428008f545e829486099298031a">AObbInfo_delete</a> (<a class="el" href="group___storage.html#gaa5037fe4c0d785a50fc62ac2de9844c3">AObbInfo</a> *obbInfo)</td></tr>
<tr class="separator:gaec5a4428008f545e829486099298031a"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga1ec7eee61541fa5a9b578801a35b9cf3"><td class="memItemLeft" align="right" valign="top">const char *&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group___storage.html#ga1ec7eee61541fa5a9b578801a35b9cf3">AObbInfo_getPackageName</a> (<a class="el" href="group___storage.html#gaa5037fe4c0d785a50fc62ac2de9844c3">AObbInfo</a> *obbInfo)</td></tr>
<tr class="separator:ga1ec7eee61541fa5a9b578801a35b9cf3"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:gacd8471c6d866cffe4a32f3b5997c782c"><td class="memItemLeft" align="right" valign="top">int32_t&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group___storage.html#gacd8471c6d866cffe4a32f3b5997c782c">AObbInfo_getVersion</a> (<a class="el" href="group___storage.html#gaa5037fe4c0d785a50fc62ac2de9844c3">AObbInfo</a> *obbInfo)</td></tr>
<tr class="separator:gacd8471c6d866cffe4a32f3b5997c782c"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga68d916570c756da9fd0d9096358300eb"><td class="memItemLeft" align="right" valign="top">int32_t&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group___storage.html#ga68d916570c756da9fd0d9096358300eb">AObbInfo_getFlags</a> (<a class="el" href="group___storage.html#gaa5037fe4c0d785a50fc62ac2de9844c3">AObbInfo</a> *obbInfo)</td></tr>
<tr class="separator:ga68d916570c756da9fd0d9096358300eb"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga1c21ed9e0848fcfc03547c95eeb48877"><td class="memItemLeft" align="right" valign="top"><a class="el" href="group___storage.html#ga419f40803228bca62e32beb911ab28e2">AStorageManager</a> *&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group___storage.html#ga1c21ed9e0848fcfc03547c95eeb48877">AStorageManager_new</a> ()</td></tr>
<tr class="separator:ga1c21ed9e0848fcfc03547c95eeb48877"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga184c06dd9cec0f21db138167d6b331ed"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group___storage.html#ga184c06dd9cec0f21db138167d6b331ed">AStorageManager_delete</a> (<a class="el" href="group___storage.html#ga419f40803228bca62e32beb911ab28e2">AStorageManager</a> *mgr)</td></tr>
<tr class="separator:ga184c06dd9cec0f21db138167d6b331ed"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga61bebaf43e57b4b7f57e7a24a62e9e3d"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group___storage.html#ga61bebaf43e57b4b7f57e7a24a62e9e3d">AStorageManager_mountObb</a> (<a class="el" href="group___storage.html#ga419f40803228bca62e32beb911ab28e2">AStorageManager</a> *mgr, const char *filename, const char *key, <a class="el" href="group___storage.html#gaf077d06586fa4c0212baa2fe458b9617">AStorageManager_obbCallbackFunc</a> cb, void *data)</td></tr>
<tr class="separator:ga61bebaf43e57b4b7f57e7a24a62e9e3d"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga4c32c8d2c780016fa36097d833b57809"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group___storage.html#ga4c32c8d2c780016fa36097d833b57809">AStorageManager_unmountObb</a> (<a class="el" href="group___storage.html#ga419f40803228bca62e32beb911ab28e2">AStorageManager</a> *mgr, const char *filename, const int force, <a class="el" href="group___storage.html#gaf077d06586fa4c0212baa2fe458b9617">AStorageManager_obbCallbackFunc</a> cb, void *data)</td></tr>
<tr class="separator:ga4c32c8d2c780016fa36097d833b57809"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga7572f2c650fc16cce1b0ab94e913a1ba"><td class="memItemLeft" align="right" valign="top">int&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group___storage.html#ga7572f2c650fc16cce1b0ab94e913a1ba">AStorageManager_isObbMounted</a> (<a class="el" href="group___storage.html#ga419f40803228bca62e32beb911ab28e2">AStorageManager</a> *mgr, const char *filename)</td></tr>
<tr class="separator:ga7572f2c650fc16cce1b0ab94e913a1ba"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:gad5c90305d627e0c768da37cb3e9f08c4"><td class="memItemLeft" align="right" valign="top">const char *&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group___storage.html#gad5c90305d627e0c768da37cb3e9f08c4">AStorageManager_getMountedObbPath</a> (<a class="el" href="group___storage.html#ga419f40803228bca62e32beb911ab28e2">AStorageManager</a> *mgr, const char *filename)</td></tr>
<tr class="separator:gad5c90305d627e0c768da37cb3e9f08c4"><td class="memSeparator" colspan="2">&#160;</td></tr>
</table>
<a name="details" id="details"></a><h2 class="groupheader">Detailed Description</h2>
<h2 class="groupheader">Typedef Documentation</h2>
<a class="anchor" id="gaa5037fe4c0d785a50fc62ac2de9844c3"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">typedef struct <a class="el" href="group___storage.html#gaa5037fe4c0d785a50fc62ac2de9844c3">AObbInfo</a> <a class="el" href="group___storage.html#gaa5037fe4c0d785a50fc62ac2de9844c3">AObbInfo</a></td>
        </tr>
      </table>
</div><div class="memdoc">
<p><a class="el" href="group___storage.html#gaa5037fe4c0d785a50fc62ac2de9844c3">AObbInfo</a> is an opaque type representing information for obb storage. </p>

</div>
</div>
<a class="anchor" id="ga419f40803228bca62e32beb911ab28e2"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">typedef struct <a class="el" href="group___storage.html#ga419f40803228bca62e32beb911ab28e2">AStorageManager</a> <a class="el" href="group___storage.html#ga419f40803228bca62e32beb911ab28e2">AStorageManager</a></td>
        </tr>
      </table>
</div><div class="memdoc">
<p><a class="el" href="group___storage.html#ga419f40803228bca62e32beb911ab28e2">AStorageManager</a> manages application OBB storage, a pointer can be obtained with <a class="el" href="group___storage.html#ga1c21ed9e0848fcfc03547c95eeb48877">AStorageManager_new()</a>. </p>

</div>
</div>
<a class="anchor" id="gaf077d06586fa4c0212baa2fe458b9617"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">typedef void(* AStorageManager_obbCallbackFunc)(const char *filename, const int32_t state, void *data)</td>
        </tr>
      </table>
</div><div class="memdoc">
<p>Callback function for asynchronous calls made on OBB files.</p>
<p>"state" is one of the following constants:</p>
<ul>
<li><a class="el" href="group___storage.html#ggae8a3b6a5d0d3244ed73924ab2421a0d0a2a9c420e6008c108a7198fd861c042d5">AOBB_STATE_MOUNTED</a></li>
<li><a class="el" href="group___storage.html#ggae8a3b6a5d0d3244ed73924ab2421a0d0a6710bb5b68cfc115eedcde2aafd8a667">AOBB_STATE_UNMOUNTED</a></li>
<li><a class="el" href="group___storage.html#ggae8a3b6a5d0d3244ed73924ab2421a0d0a50642881107d6673aace1494a5d6fce2">AOBB_STATE_ERROR_INTERNAL</a></li>
<li><a class="el" href="group___storage.html#ggae8a3b6a5d0d3244ed73924ab2421a0d0a324da2b8fea5875339d442d1f2d0b45b">AOBB_STATE_ERROR_COULD_NOT_MOUNT</a></li>
<li><a class="el" href="group___storage.html#ggae8a3b6a5d0d3244ed73924ab2421a0d0a1f2b51b53fc57b57a9967f6ce0c88dbe">AOBB_STATE_ERROR_COULD_NOT_UNMOUNT</a></li>
<li><a class="el" href="group___storage.html#ggae8a3b6a5d0d3244ed73924ab2421a0d0a3ce8539aa8b531c9de1d16041322d7a8">AOBB_STATE_ERROR_NOT_MOUNTED</a></li>
<li><a class="el" href="group___storage.html#ggae8a3b6a5d0d3244ed73924ab2421a0d0a8b074af151167a965a550b9829fafb37">AOBB_STATE_ERROR_ALREADY_MOUNTED</a></li>
<li><a class="el" href="group___storage.html#ggae8a3b6a5d0d3244ed73924ab2421a0d0a2467a4b6a634680e12c288a7790ff66c">AOBB_STATE_ERROR_PERMISSION_DENIED</a> </li>
</ul>

</div>
</div>
<h2 class="groupheader">Enumeration Type Documentation</h2>
<a class="anchor" id="gae4d5251432e1a9e6803c0240cc492e18"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">anonymous enum</td>
        </tr>
      </table>
</div><div class="memdoc">
<p>Flag for an obb file, returned by <a class="el" href="group___storage.html#ga68d916570c756da9fd0d9096358300eb">AObbInfo_getFlags()</a>. </p>
<table class="fieldtable">
<tr><th colspan="2">Enumerator</th></tr><tr><td class="fieldname"><em><a class="anchor" id="ggae4d5251432e1a9e6803c0240cc492e18a33e2ae83b4c25d33a4335dccf1de1c3a"></a>AOBBINFO_OVERLAY</em>&#160;</td><td class="fielddoc">
<p>overlay </p>
</td></tr>
</table>

</div>
</div>
<a class="anchor" id="gae8a3b6a5d0d3244ed73924ab2421a0d0"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">anonymous enum</td>
        </tr>
      </table>
</div><div class="memdoc">
<p>The different states of a OBB storage passed to <a class="el" href="group___storage.html#gaf077d06586fa4c0212baa2fe458b9617">AStorageManager_obbCallbackFunc()</a>. </p>
<table class="fieldtable">
<tr><th colspan="2">Enumerator</th></tr><tr><td class="fieldname"><em><a class="anchor" id="ggae8a3b6a5d0d3244ed73924ab2421a0d0a2a9c420e6008c108a7198fd861c042d5"></a>AOBB_STATE_MOUNTED</em>&#160;</td><td class="fielddoc">
<p>The OBB container is now mounted and ready for use. Can be returned as the status for callbacks made during asynchronous OBB actions. </p>
</td></tr>
<tr><td class="fieldname"><em><a class="anchor" id="ggae8a3b6a5d0d3244ed73924ab2421a0d0a6710bb5b68cfc115eedcde2aafd8a667"></a>AOBB_STATE_UNMOUNTED</em>&#160;</td><td class="fielddoc">
<p>The OBB container is now unmounted and not usable. Can be returned as the status for callbacks made during asynchronous OBB actions. </p>
</td></tr>
<tr><td class="fieldname"><em><a class="anchor" id="ggae8a3b6a5d0d3244ed73924ab2421a0d0a50642881107d6673aace1494a5d6fce2"></a>AOBB_STATE_ERROR_INTERNAL</em>&#160;</td><td class="fielddoc">
<p>There was an internal system error encountered while trying to mount the OBB. Can be returned as the status for callbacks made during asynchronous OBB actions. </p>
</td></tr>
<tr><td class="fieldname"><em><a class="anchor" id="ggae8a3b6a5d0d3244ed73924ab2421a0d0a324da2b8fea5875339d442d1f2d0b45b"></a>AOBB_STATE_ERROR_COULD_NOT_MOUNT</em>&#160;</td><td class="fielddoc">
<p>The OBB could not be mounted by the system. Can be returned as the status for callbacks made during asynchronous OBB actions. </p>
</td></tr>
<tr><td class="fieldname"><em><a class="anchor" id="ggae8a3b6a5d0d3244ed73924ab2421a0d0a1f2b51b53fc57b57a9967f6ce0c88dbe"></a>AOBB_STATE_ERROR_COULD_NOT_UNMOUNT</em>&#160;</td><td class="fielddoc">
<p>The OBB could not be unmounted. This most likely indicates that a file is in use on the OBB. Can be returned as the status for callbacks made during asynchronous OBB actions. </p>
</td></tr>
<tr><td class="fieldname"><em><a class="anchor" id="ggae8a3b6a5d0d3244ed73924ab2421a0d0a3ce8539aa8b531c9de1d16041322d7a8"></a>AOBB_STATE_ERROR_NOT_MOUNTED</em>&#160;</td><td class="fielddoc">
<p>A call was made to unmount the OBB when it was not mounted. Can be returned as the status for callbacks made during asynchronous OBB actions. </p>
</td></tr>
<tr><td class="fieldname"><em><a class="anchor" id="ggae8a3b6a5d0d3244ed73924ab2421a0d0a8b074af151167a965a550b9829fafb37"></a>AOBB_STATE_ERROR_ALREADY_MOUNTED</em>&#160;</td><td class="fielddoc">
<p>The OBB has already been mounted. Can be returned as the status for callbacks made during asynchronous OBB actions. </p>
</td></tr>
<tr><td class="fieldname"><em><a class="anchor" id="ggae8a3b6a5d0d3244ed73924ab2421a0d0a2467a4b6a634680e12c288a7790ff66c"></a>AOBB_STATE_ERROR_PERMISSION_DENIED</em>&#160;</td><td class="fielddoc">
<p>The current application does not have permission to use this OBB. This could be because the OBB indicates it's owned by a different package. Can be returned as the status for callbacks made during asynchronous OBB actions. </p>
</td></tr>
</table>

</div>
</div>
<h2 class="groupheader">Function Documentation</h2>
<a class="anchor" id="gaec5a4428008f545e829486099298031a"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void AObbInfo_delete </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="group___storage.html#gaa5037fe4c0d785a50fc62ac2de9844c3">AObbInfo</a> *&#160;</td>
          <td class="paramname"><em>obbInfo</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">
<p>Destroy the AObbInfo object. You must call this when finished with the object. </p>

</div>
</div>
<a class="anchor" id="ga68d916570c756da9fd0d9096358300eb"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">int32_t AObbInfo_getFlags </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="group___storage.html#gaa5037fe4c0d785a50fc62ac2de9844c3">AObbInfo</a> *&#160;</td>
          <td class="paramname"><em>obbInfo</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">
<p>Get the flags of an OBB file. </p>

</div>
</div>
<a class="anchor" id="ga1ec7eee61541fa5a9b578801a35b9cf3"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">const char* AObbInfo_getPackageName </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="group___storage.html#gaa5037fe4c0d785a50fc62ac2de9844c3">AObbInfo</a> *&#160;</td>
          <td class="paramname"><em>obbInfo</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">
<p>Get the package name for the OBB. </p>

</div>
</div>
<a class="anchor" id="gacd8471c6d866cffe4a32f3b5997c782c"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">int32_t AObbInfo_getVersion </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="group___storage.html#gaa5037fe4c0d785a50fc62ac2de9844c3">AObbInfo</a> *&#160;</td>
          <td class="paramname"><em>obbInfo</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">
<p>Get the version of an OBB file. </p>

</div>
</div>
<a class="anchor" id="ga7beb4f82e3bf9a4b8197917f92ac4d5e"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="group___storage.html#gaa5037fe4c0d785a50fc62ac2de9844c3">AObbInfo</a>* AObbScanner_getObbInfo </td>
          <td>(</td>
          <td class="paramtype">const char *&#160;</td>
          <td class="paramname"><em>filename</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">
<p>Scan an OBB and get information about it. </p>

</div>
</div>
<a class="anchor" id="ga184c06dd9cec0f21db138167d6b331ed"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void AStorageManager_delete </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="group___storage.html#ga419f40803228bca62e32beb911ab28e2">AStorageManager</a> *&#160;</td>
          <td class="paramname"><em>mgr</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">
<p>Release AStorageManager instance. </p>

</div>
</div>
<a class="anchor" id="gad5c90305d627e0c768da37cb3e9f08c4"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">const char* AStorageManager_getMountedObbPath </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="group___storage.html#ga419f40803228bca62e32beb911ab28e2">AStorageManager</a> *&#160;</td>
          <td class="paramname"><em>mgr</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const char *&#160;</td>
          <td class="paramname"><em>filename</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">
<p>Get the mounted path for an OBB. </p>

</div>
</div>
<a class="anchor" id="ga7572f2c650fc16cce1b0ab94e913a1ba"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">int AStorageManager_isObbMounted </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="group___storage.html#ga419f40803228bca62e32beb911ab28e2">AStorageManager</a> *&#160;</td>
          <td class="paramname"><em>mgr</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const char *&#160;</td>
          <td class="paramname"><em>filename</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">
<p>Check whether an OBB is mounted. </p>

</div>
</div>
<a class="anchor" id="ga61bebaf43e57b4b7f57e7a24a62e9e3d"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void AStorageManager_mountObb </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="group___storage.html#ga419f40803228bca62e32beb911ab28e2">AStorageManager</a> *&#160;</td>
          <td class="paramname"><em>mgr</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const char *&#160;</td>
          <td class="paramname"><em>filename</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const char *&#160;</td>
          <td class="paramname"><em>key</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="group___storage.html#gaf077d06586fa4c0212baa2fe458b9617">AStorageManager_obbCallbackFunc</a>&#160;</td>
          <td class="paramname"><em>cb</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">void *&#160;</td>
          <td class="paramname"><em>data</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">
<p>Attempts to mount an OBB file. This is an asynchronous operation. </p>

</div>
</div>
<a class="anchor" id="ga1c21ed9e0848fcfc03547c95eeb48877"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="group___storage.html#ga419f40803228bca62e32beb911ab28e2">AStorageManager</a>* AStorageManager_new </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">
<p>Obtains a new instance of AStorageManager. </p>

</div>
</div>
<a class="anchor" id="ga4c32c8d2c780016fa36097d833b57809"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void AStorageManager_unmountObb </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="group___storage.html#ga419f40803228bca62e32beb911ab28e2">AStorageManager</a> *&#160;</td>
          <td class="paramname"><em>mgr</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const char *&#160;</td>
          <td class="paramname"><em>filename</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const int&#160;</td>
          <td class="paramname"><em>force</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="group___storage.html#gaf077d06586fa4c0212baa2fe458b9617">AStorageManager_obbCallbackFunc</a>&#160;</td>
          <td class="paramname"><em>cb</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">void *&#160;</td>
          <td class="paramname"><em>data</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">
<p>Attempts to unmount an OBB file. This is an asynchronous operation. </p>

</div>
</div>
</div><!-- contents -->
