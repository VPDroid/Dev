page.title=TV 用のナビゲーションを作成する
page.tags=tv, d-pad, focus
trainingnavtop=true

@jd:body

<div id="tb-wrapper">
<div id="tb">
  <h2>学習の目的</h2>
  <ol>
    <li><a href="#d-pad-navigation">矢印ボタンによるナビゲーションを有効にする</a></li>
    <li><a href="#focus-selection">明確なフォーカスと選択を可能にする</a></li>
  </ol>

</div>
</div>

<p>
  TV 端末では、アプリのナビゲーション コントロールが限定されています。TV アプリ向けの効率的なナビゲーション スキームを作成できるかどうかは、これらの限定されたナビゲーション コントロールと、アプリを使用するユーザー側の認識の限界についての理解にかかっています。TV 向け Android アプリをビルドする際には、ユーザーがタッチ スクリーンではなく TV のリモコン ボタンを使用して実際にどのようにアプリをナビゲートするかについて、よく考慮する必要があります。
</p>

<p>
  このレッスンでは、効率的な TV アプリのナビゲーション スキームを作成するための最小要件と、アプリにそれらの要件を適用する方法を説明します。
</p>


<h2 id="d-pad-navigation">矢印ボタンによるナビゲーションを有効にする</h2>

<p>
  TV 端末では、ユーザーはリモコン端末の矢印ボタンを使用して、ナビゲーション操作を行います。この操作では、上、下、左、右方向への移動のみが可能です。TV 向けにこの上なく最適化されたアプリをビルドするには、このような限られたコントロールのみを使用して、ユーザーがアプリのナビゲーション方法を簡単に習得できるナビゲーション スキームを提供する必要があります。
</p>

<p>
  Android のフレームワークでは、レイアウト エレメント間のナビゲーションを自動的に処理するため、通常は特に何もする必要はありません。ただし、ナビゲーション上の不備がないか、実際のリモコンの矢印ボタンで十分にテストする必要があります。次のガイドラインに従って、アプリのナビゲーション システムが、TV 端末のリモコンの矢印ボタンを使用した場合に正しく動作するかどうかをテストします。
</p>

<ul>
  <li>ユーザーがリモコンの矢印ボタンを使って、スクリーン上のすべてのコントロールに移動できるか。
  </li>
  <li>フォーカスを使用してリストをスクロールする際、リモコンの上下ボタンでリストをスクロールし、[選択] キーでリスト内の項目を選択できるか。ユーザーがリスト内のエレメントを選択でき、選択後もリストがスクロールするか。
  </li>
  <li>コントロール間の切り替え操作がわかりやすく、予測可能であるか。
  </li>
</ul>


<h3 id="modify-d-pad-nav">矢印ボタンによるナビゲーションを編集する</h3>

<p>
  Android のフレームワークでは、レイアウト内にあるフォーカス可能なエレメントの相対位置に基づいて、矢印ボタンによるナビゲーション スキームを自動的に適用します。TV 端末のリモコンの矢印ボタンを使用して、アプリ内に生成されたナビゲーション スキームをテストする必要があります。テスト後に、ある特定の方法でユーザーがレイアウト内を移動できるようにしたい場合には、コントロールに関する矢印ボタンによるナビゲーションを明示的にセットアップできます。
</p>

<p class="note">
  <strong>注意:</strong>システムが適用したデフォルトの順序がうまく動作しない場合にのみ、これらの属性を使用してナビゲーション順序を変更します。
</p>

<p>
  次のコード サンプルでは、{@link android.widget.TextView} レイアウト オブジェクトで隣のコントロールがフォーカスを受け取るよう定義する方法を示します。
</p>

<pre>
&lt;TextView android:id="&#64;+id/Category1"
        android:nextFocusDown="&#64;+id/Category2"\&gt;
</pre>

<p>
  次の表では、Android ユーザー インターフェース ウィジェットで使用可能なナビゲーションの属性一覧を示します。
</p>

<table>
  <tr>
    <th>属性</th>
    <th>機能</th>
  </tr>
  <tr>
    <td>{@link android.R.attr#nextFocusDown}</td>
    <td>ユーザーが下に移動したときにフォーカスを受け取る隣のビューを定義します。</td>
  </tr>
  <tr>
    <td>{@link android.R.attr#nextFocusLeft}</td>
    <td>ユーザーが左に移動したときにフォーカスを受け取る隣のビューを定義します。</td>
  </tr>
  <tr>
    <td>{@link android.R.attr#nextFocusRight}</td>
    <td>ユーザーが右に移動したときにフォーカスを受け取る隣のビューを定義します。</td>
  </tr>
  <tr>
    <td>{@link android.R.attr#nextFocusUp}</td>
    <td>ユーザーが上に移動したときにフォーカスを受け取る隣のビューを定義します。</td>
  </tr>
</table>

<p>
  これらの明示的なナビゲーション属性のいずれかを使用するには、レイアウト内の別のウィジェットの ID （{@code android:id} 値）に対する値を設定します。最後のコントロールが最初のコントロールにフォーカスを戻すようにするには、ナビゲーションの順序をループとしてセットアップする必要があります。
</p>



<h2 id="focus-selection">明確なフォーカスと選択を可能にする</h2>

<p>
  TV 端末でアプリのナビゲーション スキームにとって重要なのは、スクリーン上のどのユーザー インターフェース エレメントにフォーカスがあるのかを、ユーザーが簡単に判別できるようにすることです。フォーカス状態のアイテムが明確でないと、ユーザーはどのアイテムに対してアクションが可能か判別できず、ストレスを感じてアプリを終了してしまうことになります。同じ理由で、アプリが起動直後やアイドル状態にある場合でも、ユーザーのアクションが可能なフォーカス状態のアイテムを常に配置しておく必要があります。
</p>

<p>
  アプリのレイアウトと実装においては、色、サイズ、アニメーションや、これらの属性の組み合わせを使用して、ユーザーが次に可能なアクションを簡単に判別できるようにする必要があります。アプリ内では、一貫したスキームを使用してフォーカス状態を示すようにしてください。
</p>

<p>
  Android は<a href="{@docRoot}guide/topics/resources/drawable-resource.html#StateList">ドローアブルとしての状態リスト リソース</a>を提供しており、フォーカス状態の、そして選択済みのコントロールにハイライトを実装できます。次のコード例では、ボタンの視覚的な動作を有効にして、ユーザーがそのコントロールにナビゲートし、選択したことを表示する方法を示します。
</p>

<pre>
&lt;!-- res/drawable/button.xml --&gt;
&lt;?xml version="1.0" encoding="utf-8"?&gt;
&lt;selector xmlns:android="http://schemas.android.com/apk/res/android"&gt;
    &lt;item android:state_pressed="true"
          android:drawable="@drawable/button_pressed" /&gt; &lt;!-- pressed --&gt;
    &lt;item android:state_focused="true"
          android:drawable="@drawable/button_focused" /&gt; &lt;!-- focused --&gt;
    &lt;item android:state_hovered="true"
          android:drawable="@drawable/button_focused" /&gt; &lt;!-- hovered --&gt;
    &lt;item android:drawable="@drawable/button_normal" /&gt; &lt;!-- default --&gt;
&lt;/selector&gt;
</pre>

<p>
  次のレイアウトの XML サンプル コードは、{@link android.widget.Button} に対する 1 つ前の状態リスト ドローアブルにも該当します。
</p>

<pre>
&lt;Button
    android:layout_height="wrap_content"
    android:layout_width="wrap_content"
    android:background="@drawable/button" /&gt;
</pre>

<p>
  周囲のハイライトがはっきりと見えるように、フォーカス可能で選択可能なコントロール内には十分なパディングを残してください。
</p>

<p>
  TV アプリでの効率的な選択とフォーカスの設計に関する推奨事項については、<a href="{@docRoot}design/tv/patterns.html">TV のパターン</a>を参照してください。
</p>
